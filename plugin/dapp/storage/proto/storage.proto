syntax = "proto3";
package types;
//
message Storage {
    oneof value {
        ContentOnlyNotaryStorage  contentStorage      = 1;
        HashOnlyNotaryStorage     hashStorage         = 2;
        LinkNotaryStorage         linkStorage         = 3;
        EncryptNotaryStorage      encryptStorage      = 4;
        EncryptShareNotaryStorage encryptShareStorage = 5;
        EncryptNotaryAdd          encryptAdd          = 6;
    }
    int32 ty = 7;
}

message StorageAction {
    oneof value {
        ContentOnlyNotaryStorage  contentStorage      = 1;
        HashOnlyNotaryStorage     hashStorage         = 2;
        LinkNotaryStorage         linkStorage         = 3;
        EncryptNotaryStorage      encryptStorage      = 4;
        EncryptShareNotaryStorage encryptShareStorage = 5;
        EncryptNotaryAdd          encryptAdd          = 6;
    }
    int32 ty = 7;
}
//
message ContentOnlyNotaryStorage {
    //      512k
    bytes content = 1;
    //      ，    ，    ，  txhash key
    string key = 2;
    // Op 0     1    add
    int32  op = 3;
    //
    string value = 4;
}

//      ，    sha256  ，  256
message HashOnlyNotaryStorage {

    //     32
    bytes hash = 1;
    //      ，    ，    ，  txhash key
    string key = 2;
    //
    string value = 3;
}

//
message LinkNotaryStorage {
    //       ，    URL,               .
    bytes link = 1;
    //    hash ，    sha256  ，  256
    bytes hash = 2;
    //      ，    ，    ，  txhash key
    string key = 3;
    //
    string value = 4;
}

//       ，          ，      ，
message EncryptNotaryStorage {
    //       hash ，    sha256  ，  256
    bytes contentHash = 1;
    //      ，   key nonce         。
    bytes encryptContent = 2;
    //  iv，  AES            iv,
    bytes nonce = 3;
    //      ，    ，    ，  txhash key
    string key = 4;
    //
    string value = 5;
}

//         ,     sdk
message EncryptShareNotaryStorage {
    //       hash ，    sha256  ，  256
    bytes contentHash = 1;
    //      。,
    bytes encryptContent = 2;
    //
    bytes pubKey = 3;
    //      ，    ，    ，  txhash key
    string key = 4;
    //
    string value = 5;
}

//
message EncryptNotaryAdd {
    //
    string key = 1;
    //
    bytes encryptAdd = 2;
}

service storage {}
//  txhash
message QueryStorage {
    string txHash = 1;
}
//
message BatchQueryStorage {
    repeated string txHashs = 1;
}

message BatchReplyStorage {
    repeated Storage storages = 1;
}

message ReceiptStorage {
}
